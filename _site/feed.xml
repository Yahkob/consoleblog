<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">console.blog()</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://consoleblog.azurewebsites.net/feed.xml" />
<link rel="alternate" type="text/html" href="http://consoleblog.azurewebsites.net" />
<updated>2014-07-07T00:20:16-04:00</updated>
<id>http://consoleblog.azurewebsites.net/</id>
<author>
  <name>Jake Harclerode</name>
  <uri>http://consoleblog.azurewebsites.net/</uri>
  <email>jakobharclerode@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Objects in Javascript part two]]></title>
 <link rel="alternate" type="text/html" href="http://consoleblog.azurewebsites.net/objects-part-two/" />
  <id>http://consoleblog.azurewebsites.net/objects-part-two</id>
  <published>2014-07-06T00:00:00-04:00</published>
  <updated>2014-07-06T00:00:00-04:00</updated>
  <author>
    <name>Jake Harclerode</name>
    <uri>http://consoleblog.azurewebsites.net</uri>
    <email>jakobharclerode@gmail.com</email>
  </author>
  <content type="html">Yesterday I talked about objects in javascript and the basis of how they are constructed in javascript. I wanted to expand on objects, why they are amazing and how you can utilize them. Lets say we want to get the most repeated character in a string. We write a function that takes in a string and spits out the character that is the most repeated, if two different characters are repeated the same amount (i.e &quot;ccoode&quot;) the first occurence should be returned, in this case the letter &#39;c&#39;. Before I learned about how hashtables and objects worked I probably would have done this with a for loop in a for loop. This is bad time complexity the fact that there is a for loop within a for loop turns the time complexity from linear or o(n) to quadratic ( o(n^2) ). With an object this function is linear, all we have to do is iterate through each character and each time add it into a hash incrementing by 1 for each we character we find. For instance the object of the above mentioned string would be:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

 We could figure out the highest occuring character by making a variable, count and checking if the current character&#39;s value in our hash is higher than the highest count if it is then we set count to the new highest recorded value. In order to keep track of the character that is occuring most we also set a variable to the result string and set said highest values key to this variable. This way we loop once and we&#39;re done.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;characterOccurence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;duplicateCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resultStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;duplicateCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;duplicateCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;duplicateCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duplicateCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;duplicateCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resultStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resultStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

You could also run another seperate for loop outside the first for loop iterating through the string.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duplicateCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;duplicateCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resultStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

Theres a reason you don&#39;t use a for in loop to iterate through the results. Objects don&#39;t always guarantee order so by looping through the str and checking each character in order you are guaranteed order.
Something interesting worth mentioning, this could be done in essentially a line of code using a &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_expression&quot;&gt;regular expression:&lt;/a&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;characterOccurence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/([a-z])\1+/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

Regexs are very powerful and an awesome tool to use if you know how. Regexs in alot of cases are faster than hard coded functions to solve small problems like this. Interestingly enough a regex and the function using a hash to store data are pretty much neck to neck as far as speed goes. Check out this &lt;a href=&quot;http://jsperf.com/regexvshash&quot;&gt;jsperf comparison&lt;/a&gt; I made and compare for yourself. I also included a nested for loop just to demonstrate how bad it is to achieve quadratic time complexity. Unless you can not avoid it try not to make your function quadratic at all costs! Seeing the comparison should be enough to prove to you objects are extremly powerful! Thanks for reading, I plan to write my next post about coffeescript and backbone and then hopefully Angular. Also if the regex confused you and you&#39;re interested in learning more copy my regex and paste it into &lt;a href=&quot;http://regex101.com/&quot;&gt;regex 101&lt;/a&gt;. Stay tuned!
  &lt;p&gt;&lt;a href=&quot;http://consoleblog.azurewebsites.net/objects-part-two/&quot;&gt;Objects in Javascript part two&lt;/a&gt; was originally published by Jake Harclerode at &lt;a href=&quot;http://consoleblog.azurewebsites.net&quot;&gt;console.blog()&lt;/a&gt; on July 06, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Objects in Javascript part one]]></title>
 <link rel="alternate" type="text/html" href="http://consoleblog.azurewebsites.net/objects-part-one/" />
  <id>http://consoleblog.azurewebsites.net/objects-part-one</id>
  <published>2014-07-05T00:00:00-04:00</published>
  <updated>2014-07-05T00:00:00-04:00</updated>
  <author>
    <name>Jake Harclerode</name>
    <uri>http://consoleblog.azurewebsites.net</uri>
    <email>jakobharclerode@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Today I want to talk about objects, one of the most important and powerful tools of Javascript. Objects are essentially hash tables, the idea of a hash table is an array with data that is available through constant time complexity. In order to implement a hash table you must first make a hashing function. A hashing function essentially takes an element and ‘hashes’ it to a unique number. I won’t go into how an actual hashing function works in respect to keeping on the topic of objects, just know that a hashing function will transform a value into a unique key. So let’s say I want to insert something into our hash table, I want to insert the key Bacon with the value Amazing. I hash bacon and lets say our hashing function hashes it to four. As I said before a hash table is an array so since our value is four this is the index our key value pair will be inserted. How will it be inserted though? Surely we can’t have just two elements in an array with no relationship. How can we group keys with their values together? And what if another key hashes to four? First off we create an array at that index we will call a bucket. Then we will create another array inside of our bucket called a tuple. A tuple is quite simply an array to contain the relation between the key and the value. So what if we add something extremly similar like “Baconn” with a value of “Delicious”. This is where the bucket that I just mentioned that may have confused you comes in. Since Bacon and Baconn are so similar Baconn will also hash to four and be stored in a tuple in the same bucket as Bacon. So not only do we have an array(the bucket) within our array we have arrays(tuples) within that array! For the sake of teaching I’ll indicate each index instead of an empty array.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bacon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Amazing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Baconn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Delicious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now what if we want to look up how Baconn made us feel when we inserted it into our hash table?
We do the same thing as when we inserted it, we hash Baconn and it hashes to 4. So now we know we can look in index 4 for our desired element. Since there’s two keys we’ll have to iterate through the bucket. This may seem like a lot of work but think of the time complexity of iterating through an array with hundreds of items vs searching through a hash table with hundreds of items. The odds are you wouldn’t be iterating through nearly as many elements iterating through a specific bucket as you would iterating through a large array. In the worst case look up of an item would be linear, this would be if you had a bad hashing function or did not resize your hash when it got to big (which I didn’t go into). On average this will be constant time look up. You are given the index of the target element and in most cases you will only have to iterate through minimal items in a bucket to find the target element.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://consoleblog.azurewebsites.net/objects-part-one/&quot;&gt;Objects in Javascript part one&lt;/a&gt; was originally published by Jake Harclerode at &lt;a href=&quot;http://consoleblog.azurewebsites.net&quot;&gt;console.blog()&lt;/a&gt; on July 05, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Deploying Jekyll with Azure]]></title>
 <link rel="alternate" type="text/html" href="http://consoleblog.azurewebsites.net/jekyll-azure-deployment/" />
  <id>http://consoleblog.azurewebsites.net/jekyll-azure-deployment</id>
  <published>2014-06-20T00:00:00-04:00</published>
  <updated>2014-06-20T00:00:00-04:00</updated>
  <author>
    <name>Jake Harclerode</name>
    <uri>http://consoleblog.azurewebsites.net</uri>
    <email>jakobharclerode@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Just wanted to put together a short post about deploying to Azure using Jekyll. I had a little trouble initially setting everything up as I had never used Jekyll or Azure. With that being said I wanted to give a brief tutorial of this process so you don’t run into the same problems I did. First off fork and clone &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll&lt;/a&gt;, I personally use the &lt;a href=&quot;https://github.com/mmistakes/hpstr-jekyll-theme&quot;&gt;hipster&lt;/a&gt; layout for Jekyll. Now cd into your blogs directory, make a new file named .deployment then open it in sublime:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch .deployment
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;subl .deployment&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since my blogs directory is _site my .deployment file should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[config]
project = _site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we’ve made a .deployment file it’s time to make your website&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/azureweb.png&quot; /&gt;
&lt;img src=&quot;/images/customcreate.png&quot; /&gt;
&lt;img src=&quot;/images/git.png&quot; /&gt;
&lt;img src=&quot;/images/postsource.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select github and the repository you have your blog in. Before you deploy edit your _config.yml, feel free to edit and personalize any information you see fit in your config file but you have to change the url property from localhost:3000 to your azure url we created. In my case ‘YahkobTutorial.azurewebsites.net’. Save your config file then run&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;if you want to preview your blog and make tweeks to it locally before you deploy it you can simply run&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;this will run on localhost:3000 even after you edit your url in config. By doing this Jekyll will create your site directory. Verify build created some sort of site directory. We need to make sure because this is referenced in your .deployment file. Make sure your site directory has an index.html file with all of your content. And that’s it your Jekyll blog is deployed to azure! Azure will automatically redeploy from your github everytime you push to your github.&lt;/p&gt;

&lt;h2&gt; Optional step&lt;/h2&gt;
&lt;p&gt;If you’re blogging until your fingers set on fire you might consider making a simple grunt file. Not sure what Grunt is? Check out &lt;a href=&quot;http://www.gruntjs.com/&quot;&gt;gruntjs.com&lt;/a&gt; if you’re interested, essentially it’s a task runner. You can do a lot of very useful and cool things with grunt but in this case I’m just going to automate&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;whenever you save a file. First run the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install grunt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install grunt-shell
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install grunt-contrib-watch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There should already be a Gruntfile.js I might be doing something terribly wrong but I never use the default Gruntfile we get for free. Just put the default one in a safe place and make a new file with the same name.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll build&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_config.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_posts/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;shell:build&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-shell&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-watch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First we’ll need to setup our Grunt file. I won’t go too much into the syntax or why what does what. We’re going to need to set up the configuration of our grunt file. We first need to setup a way for grunt to read our package.json so grunt can import data from package.json. Then with our shell module we can specify what command we want grunt to execute in terminal in this case jekyll build. After that we’ll set up which files to watch and what to do when they change. In case the asterik is confusing to you it just means literally any file in _posts. We then set its task to build from shell. Load in your modules then register grunts default behavior when you run&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grunt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and there you have it. When you run this your jekyll site will build automatically. All you have to do is commit and push.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://consoleblog.azurewebsites.net/jekyll-azure-deployment/&quot;&gt;Deploying Jekyll with Azure&lt;/a&gt; was originally published by Jake Harclerode at &lt;a href=&quot;http://consoleblog.azurewebsites.net&quot;&gt;console.blog()&lt;/a&gt; on June 20, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Hack Reactor Week 3ish]]></title>
 <link rel="alternate" type="text/html" href="http://consoleblog.azurewebsites.net/hack-reactor-week-3/" />
  <id>http://consoleblog.azurewebsites.net/hack-reactor-week-3</id>
  <published>2014-06-16T00:00:00-04:00</published>
  <updated>2014-06-16T00:00:00-04:00</updated>
  <author>
    <name>Jake Harclerode</name>
    <uri>http://consoleblog.azurewebsites.net</uri>
    <email>jakobharclerode@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;After a lot of procrastinating I finally got around to setting up my blog. For those of you that don’t know me my name’s Jake, I’m 24 living in San Fransisco from Flagstaff, Arizona. I moved to San Fransisco in late May to pursue my goal as of the last couple years to become a full stack software engineer. I’ve always been interested in tech related stuff and after going dead end job to dead end job waiting tables and working other odd jobs I decided it was time for a change. Vacationing in San Diego two Aprils ago I met a guy that asked me what I wanted to do with my life. I told him my plan was to go to school in hopes of getting a CS degree. He instantly shot me down and told me anything I would learn would be outdated and not prepare me for actual software development. He instead gave me a list of languages, libraries and frameworks to learn.&lt;/p&gt;

&lt;p&gt;I dove into JavaScript not really knowing what was going on…at all. I learned JavaScript, HTML and other random things. I have to say at this point I definitely did not think I could become a software engineer. At this point I was learning some other programming languages and solidifying my knowledge of JS at my own pace but it didn’t seem like enough. It was around this time I stumbled apon a article talking about “Programming Bootcamps” and the future of CS degrees. At first I read about Dev Bootcamp here in San Fransisco.. it sounded awesome so I started to learn a little bit of Ruby and made it my goal to get accepted into Dev Bootcamp. In the process of taking a handful of Ruby tutorials I started reading up on Quora about other programming bootcamps. I started to read about another bootcamp called Hack Reactor. Someone asked the question &lt;a href=&quot;http://www.quora.com/Dev-Bootcamp/Im-interested-in-attending-a-Programming-Bootcamp-How-do-I-decide-between-Dev-Bootcamp-and-Hack-Reactor&quot;&gt; “How do I decide between Dev Bootcamp and Hack Reactor?”&lt;/a&gt;. After reading one of the co-founders response I was instantly hooked, first of all Hack Reactor was 3 weeks longer than Dev Bootcamp and instead of putting in three hundred and some odd number of hours if you went to Hack Reactor you would be there for twice that time(thanks for selling me Shawn =D)!&lt;/p&gt;

&lt;p&gt;So I abandoned the plan of going to Dev Bootcamp and started to code until my eyes bled. I quickly made it my life to learn how to code every minute of the day I could get away with it. The first interview I had I bombed….terribly. I then proceeded to code alot for a few weeks and scheduled another interview. This time I had a solid JS foundation and to my suprise passed. After passing I was given the task of building a small chat application with a little jQuery and AJAX. I had a lot of fun building it and was confident to pass the next interview. At this time I had just found out my girlfriend was pregnant so I fratically scheduled my next interview. So one cold December day I sat down and had a Skype interview with a HiR (Hacker in Residence) at Hack Reactor. Shaking and anxious after hearing the news I was going to be a father I started my interview. The guy interviewing me asked me a few questions about myself, I could barely answer those as it was from my level on anxiety. Next we got to the actual coding part of the interview. I flew through the first question and got to the second question I froze and had no idea what to do.&lt;/p&gt;

&lt;p&gt;Sadly he told me he didn’t think I was quite ready for Hack Reactor. He gave me the offer of finishing the next two problems in the next hour and he would give me the accept to go to Hack Reactor. I frantically tried to figure them out, I got the second one in a couple minutes since the pressure was off but the other problem really tested my patience and knowledge of JS. I emailed him the problems in hopes that I would just maybe get accepted. The next day I got a message from Hack Reactor telling me they weren’t going to accept me at the time. They told me if I wrote an application with Ruby on Rails or Meteor I could apply again. I tried poking around with Meteor and building what I thought was a pretty simple idea for a two player game.&lt;/p&gt;

&lt;p&gt;At this point I totally gave up. I realized this was part of being a software engineer, not always knowing what to do. Being a good software engineer is having the ability to overcome hurdles and have something completly foreign thrown at you and being able to figure it out. It took me about two months to write my &lt;a href=&quot;http://bubblepopper.meteor.com&quot;&gt;application&lt;/a&gt; due to biting off a lot more than I could chew. When I was done I couldn’t believe I actually made an application. I scheduled my technical interview for March and studied JavaScript a ton. Long story short I took the interview and passed in about 15 minutes (the interviews are usually an hour long). When I said passing the pre technical interview was the best day of my life I lied when I passed the technical interview it was DEFINITELY the best day of my life.&lt;/p&gt;

&lt;p&gt;After that it was on to the pre course curriculum which was basically build a bunch of javascript helper methods and reorganize some data to look like twitter. This was extremly challenging but in the end was really rewarding and made me feel a lot more competent in the path I had chosen. I can’t begin to say how hard and emotional of an experience it was to get into Hack Reactor. You need to know JavaScript extremely well and then you need to learn it better.&lt;/p&gt;

&lt;p&gt;Looking back to last September when I started to prepare for all of this seems like a lifetime but I wouldn’t give it up for anything. The main point of this post was to let you know if you’re applying for a programming bootcamp and don’t get accepted at first never give up keep on trying, it’s very worth it. So here I am at my third week of Hack Reactor and even though it has been very sad to be away from my beautiful girlfriend and amazing newborn son it has been an awesome experience. If you made it this far I commend you this is basically five blog posts I should have wrote but just compiled it into one huge one. I plan on blogging here as much as I can about my experience at Hack Reactor. If you have any questions or want any advice or interested in learning to code/getting into a bootcamp please reach out to me. I was in the same position as you reading Hack Reactorers(?) blogs before I got accepted.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://consoleblog.azurewebsites.net/hack-reactor-week-3/&quot;&gt;Hack Reactor Week 3ish&lt;/a&gt; was originally published by Jake Harclerode at &lt;a href=&quot;http://consoleblog.azurewebsites.net&quot;&gt;console.blog()&lt;/a&gt; on June 16, 2014.&lt;/p&gt;</content>
</entry>

</feed>
